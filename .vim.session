let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <silent> <S-Tab> =BackwardsSnippet()
inoremap <silent> <SNR>85_yrrecord =YRRecord3()
inoremap <silent> <expr> <Plug>(MultiWordComplete) MultiWordComplete#Expr()
inoremap <silent> <Plug>(MultiWordPostComplete) =MultiWordComplete#RemoveBaseKeys()
imap <silent> <expr> <F5> (pumvisible() ? "\<Plug>LookupFileCE" : "")."\\<Plug>LookupFile"
inoremap <Plug>LookupFileCE 
imap <F2> :update
map  h
snoremap <silent> 	 i<Right>=TriggerSnippet()
map <NL> j
map  k
map  l
nnoremap <silent>  :YRReplace '1', p
nnoremap <silent>  :YRReplace '-1', P
snoremap  b<BS>
map   
vnoremap <silent> # :call VisualSearch('b')
vnoremap $e `>a"`<i"
vnoremap $q `>a'`<i'
vnoremap $$ `>a"`<i"
vnoremap $3 `>a}`<i{
vnoremap $2 `>a]`<i[
vnoremap $1 `>a)`<i(
snoremap % b<BS>%
snoremap ' b<BS>'
vnoremap <silent> * :call VisualSearch('f')
nmap ,ihn :IHN
nmap ,is :IHS:A
nmap ,ih :IHS
map ,<F5><F5> <Plug>AutocompStart
nmap <silent> ,,<F5> <Plug>LookupFile
map <silent> ,cc <Plug>CRV_CRefVimInvoke
map <silent> ,cw <Plug>CRV_CRefVimAsk
nmap <silent> ,cr <Plug>CRV_CRefVimNormal
vmap <silent> ,cr <Plug>CRV_CRefVimVisual
map ,<F12> :!callgraph -f =expand("<cword>") -d %:p:h
map ,<F9> :VoomToggle
map ,<F6> :cs find d =expand("<cword>") 
nmap ,<F5> :SrcExplToggle
map ,<F8> :!cscope -Rb $(find `pwd` -iregex '.+\.[chp]+')
map ,<F7> :!ctags --exclude='.git' -R --language=c++ --c++-kinds=+px . 
map ,4 :cclose
map ,3 :cnext
map ,2 :cprev
map ,1 :botright copen 12
map ,, :BufExplorer
map ,j :FufJumpList
map ,d :FufDir
map ,b :FufBuffer
map ,f :FufFile
map ,q :e ~/buffer
map ,s? z=
map ,sa zg
map ,sp [s
map ,sn ]s
map ,ss :setlocal spell!
map ,u :TMiniBufExplorer:TMiniBufExplorer
map ,p :cp
map ,cd :cd %:p:h
map ,tm :tabmove 
map ,tc :tabclose
map ,te :tabedit 
map ,tn :tabnew %
map ,ba :1,300 bd!
map ,bd :Bclose
map <silent> , :noh
map ,g :vimgrep // **/*.<Left><Left><Left><Left><Left><Left><Left>
map ,t8 :setlocal shiftwidth=4
map ,t4 :setlocal shiftwidth=4
map ,t2 :setlocal shiftwidth=2
map ,e :e! ~/.vim_runtime/vimrc
nmap ,w :w!
nmap 0 ^
vmap 0 ^
nmap @ :YRMapsMacro
cmap Â½ $
imap Â½ $
nmap F :CtrlP
vmap F :CtrlP
xnoremap <silent> P :YRPaste 'P', 'v'
nnoremap <silent> P :YRPaste 'P'
snoremap U b<BS>U
snoremap \ b<BS>\
snoremap ^ b<BS>^
snoremap ` b<BS>`
xnoremap <silent> d :YRDeleteRange 'v'
nmap f :CtrlP
vmap f :CtrlP
vmap gx <Plug>NetrwBrowseXVis
nmap gx <Plug>NetrwBrowseX
nnoremap <silent> gp :YRPaste 'gp'
nnoremap <silent> gP :YRPaste 'gP'
vnoremap <silent> gv :call VisualSearch('gv')
xnoremap <silent> p :YRPaste 'p', 'v'
nnoremap <silent> p :YRPaste 'p'
map s :vertical ptj =expand("<cword>")
xnoremap <silent> x :YRDeleteRange 'v'
xnoremap <silent> y :YRYankRange 'v'
nnoremap <SNR>104_: :=v:count ? v:count : ''
snoremap <Left> bi
snoremap <Right> a
snoremap <BS> b<BS>
snoremap <silent> <S-Tab> i<Right>=BackwardsSnippet()
vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())
nnoremap <silent> <SNR>85_yrrecord :call YRRecord3()
map <F12><F12> :NERDTreeToggle
map <F12> :NERDTreeFind
map <F9><F9> :Me
map <F9> :Mer
map <F8> :tn
map <F7> :tp
map <F6><F6> :cs find e =expand("<cword>") 
map <F6> :cs find c =expand("<cword>") 
map <F5><F5> :Tlist
map <F5> :TagbarToggle
map <F3><F3> :Rgrep 
map <F3> :Rfgrep 
map <F4> :Bclose
nmap <F2> :update
map <C-Left> :bp
map <C-Right> :bn
cnoremap  <Home>
cnoremap  <End>
inoremap <silent> 	 =TriggerSnippet()
cnoremap  
cnoremap  <Down>
cnoremap  <Up>
inoremap <silent> 	 =ShowAvailableSnips()
imap w <Plug>(MultiWordComplete)<Plug>(MultiWordPostComplete)
inoremap $e ""i
inoremap $q ''i
inoremap $4 {o}O
inoremap $3 {}i
inoremap $2 []i
inoremap $1 ()i
cnoremap $q eDeleteTillSlash()
cnoremap $c e eCurrentFileDir("e")
cnoremap $j e ./
cnoremap $d e ~/Desktop/
cnoremap $h e ~/
imap ,ihn :IHN
imap ,is :IHS:A
imap ,ih :IHS
vmap Â½ $
nmap Â½ $
omap Â½ $
map Ã¦ :CtrlPClearCache
vmap Ã« :m'<-2`>my`<mzgv`yo`z
vmap Ãª :m'>+`<my`>mzgv`yo`z
nmap Ã« mz:m-2`z
nmap Ãª mz:m+`z
iabbr xdate =strftime("%d/%m/%y %H:%M:%S")
let &cpo=s:cpo_save
unlet s:cpo_save
set autoindent
set autoread
set background=dark
set backspace=eol,start,indent
set cmdheight=2
set expandtab
set exrc
set fileencodings=utf8,gbk
set grepprg=/bin/grep\ -nH
set guifont=Source_Han_Sans_HW_SC:h10:cGB2312
set guifontwide=å¹¼åœ†:h10:cGB2312
set helplang=en
set hidden
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set matchtime=2
set pastetoggle=,<F12>
set printoptions=paper:a4
set ruler
set runtimepath=~/.vim,~/.vim/bundle/Vundle.vim,~/.vim/bundle/L9,~/.vim/bundle/CRefVim,~/.vim/bundle/FuzzyFinder,~/.vim/bundle/genutils,~/.vim/bundle/lookupfile,~/.vim/bundle/snipMate,~/.vim/bundle/grep.vim,~/.vim/bundle/autocomp.vim,~/.vim/bundle/OmniCppComplete,~/.vim/bundle/vim-fugitive,~/.vim/bundle/gv.vim,~/.vim/bundle/nerdtree,~/.vim/bundle/vim-autotag,~/.vim/bundle/a.vim,~/.vim/bundle/c-support,~/.vim/bundle/bufexplorer,~/.vim/bundle/csExplorer,~/.vim/bundle/ctrlp.vim,~/.vim/bundle/SrcExpl,~/.vim/bundle/tagbar,~/.vim/bundle/taglist.vim,~/.vim/bundle/VOoM,~/.vim/bundle/vim-MultiWordComplete,~/.vim/bundle/YankRing.vim,~/.vim/bundle/tabular,~/.vim/bundle/vim-markdown,~/.vim/bundle/sparkup/vim/,/var/lib/vim/addons,/usr/share/vim/vimfiles,/usr/share/vim/vim74,/usr/share/vim/vimfiles/after,/var/lib/vim/addons/after,~/.vim/after,~/.vim/bundle/Vundle.vim,~/.vim/bundle/Vundle.vim/after,~/.vim/bundle/L9/after,~/.vim/bundle/CRefVim/after,~/.vim/bundle/FuzzyFinder/after,~/.vim/bundle/genutils/after,~/.vim/bundle/lookupfile/after,~/.vim/bundle/snipMate/after,~/.vim/bundle/grep.vim/after,~/.vim/bundle/autocomp.vim/after,~/.vim/bundle/OmniCppComplete/after,~/.vim/bundle/vim-fugitive/after,~/.vim/bundle/gv.vim/after,~/.vim/bundle/nerdtree/after,~/.vim/bundle/vim-autotag/after,~/.vim/bundle/a.vim/after,~/.vim/bundle/c-support/after,~/.vim/bundle/bufexplorer/after,~/.vim/bundle/csExplorer/after,~/.vim/bundle/ctrlp.vim/after,~/.vim/bundle/SrcExpl/after,~/.vim/bundle/tagbar/after,~/.vim/bundle/taglist.vim/after,~/.vim/bundle/VOoM/after,~/.vim/bundle/vim-MultiWordComplete/after,~/.vim/bundle/YankRing.vim/after,~/.vim/bundle/tabular/after,~/.vim/bundle/vim-markdown/after,~/.vim/bundle/sparkup/vim//after
set scrolloff=7
set shiftwidth=4
set showmatch
set showtabline=2
set smartindent
set smarttab
set splitright
set statusline=[%F]%=[Line:%l/%L:%c][%p%%]
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set noswapfile
set switchbuf=usetab
set tabstop=4
set textwidth=500
set wildmenu
set nowritebackup
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/workspace/kproject/szgjn2020
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +0 .git/config
argglobal
silent! argdel *
argadd .git/config
edit .git/config
set splitbelow splitright
set nosplitbelow
wincmd t
set winheight=1 winwidth=1
argglobal
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal backupcopy=
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=:#,:;
setlocal commentstring=;\ %s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'gitconfig'
setlocal filetype=gitconfig
endif
setlocal fixendofline
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=GetGitconfigIndent()
setlocal indentkeys=o,O,*<Return>,0[,],0;,0#,=,!^F
setlocal noinfercase
setlocal iskeyword=@,48-57,192-255,-
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal lispwords=
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=bin,octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'gitconfig'
setlocal syntax=gitconfig
endif
setlocal tabstop=4
setlocal tagcase=
setlocal tags=
setlocal textwidth=500
setlocal thesaurus=
setlocal noundofile
setlocal undolevels=-123456
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 14 - ((7 * winheight(0) + 4) / 8)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
14
normal! 031|
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
